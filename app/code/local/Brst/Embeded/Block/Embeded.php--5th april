<?php
class Brst_Embeded_Block_Embeded extends Mage_Core_Block_Template
{

	public function __construct()
	{
		parent::__construct();
                
                $result= $this->allQuery();
                
                $prodIds=explode(',',$result['product_id']); 
                //echo "<pre>";print_r($prodIds);die('asj');
		$collection = Mage::getModel('catalog/product')->getCollection();
                $attributes = Mage::getSingleton('catalog/config')->getProductAttributes();
                $collection->addAttributeToSelect($attributes);
                $collection->addAttributeToSelect('*')->addAttributeToFilter('entity_id', array('in'=>$prodIds));
                     
                //echo "<pre>";print_r($collection->getData());die('asj');   
		$this->setCollection($collection);
	
        }
        public function allQuery()
        {
            $data=$this->getRequest()->getParam('code');
            $resource = Mage::getSingleton('core/resource');
            $connection= $resource->getConnection('core_read');			
            $query="select * from tbl_embedcode where embed_code='$data'";
            $result=$connection->query($query);
            $alldata = $result->fetch(); 
            return $alldata;
        }
        

	protected function _prepareLayout()
	{
		parent::_prepareLayout();

		$parent_id = Mage::app()->getStore()->getRootCategoryId();
		if($this->getRequest()->getParam('category_id',false)){
			$parent_id = $this->getRequest()->getParam('category_id');
		}
                

		$toolbar = $this->getToolbarBlock();
		// called prepare sortable parameters
		$collection = $this->getCollection();
		$toolbar->setCollection($collection);

		$this->setChild('toolbar', $toolbar);
		$this->getCollection()->load();
		return $this;
	}
	public function getDefaultDirection(){
		return 'asc';
	}
	public function getAvailableOrders(){
		return array('name'=> 'Name','position'=>'Position','children_count'=>'Sub Category Count');
	}
	public function getSortBy(){
		return 'name';
	}
	public function getToolbarBlock()
	{
		$block = $this->getLayout()->createBlock('embeded/toolbar', microtime());
		return $block;
	}
	public function getMode()
	{
		return $this->getChild('toolbar')->getCurrentMode();
	}

	public function getToolbarHtml()
	{
		return $this->getChildHtml('toolbar');
	}
}